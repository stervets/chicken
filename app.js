// Generated by CoffeeScript 1.9.1

/*
    Angular application
 */

(function() {
  var Sound, app,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app = new Triangle('CluckingClubApplication', ['firebase', 'ngAnimate']);


  /*
      Sound player class
   */

  Sound = (function() {
    Sound.prototype.file = null;

    Sound.prototype.play = function() {
      this.file.pause();
      this.file.currentTime = 0;
      return this.file.play();
    };

    function Sound(name) {
      this.play = bind(this.play, this);
      this.file = new Audio();
      this.file.src = "snd/" + name + ".mp3";
    }

    return Sound;

  })();


  /*
      Application main factory
   */

  app.factory(FACTORY, {
    inject: '$firebaseObject, $firebaseArray, $rootScope',
    db: new Firebase(DATABASE_NAME),
    app: {
      state: APP_STATE.LOADING,
      userFirebaseObject: null,
      user: null,
      users: null,
      poops: null,
      error: false,
      message: ''
    },
    cluckSounds: [],
    fartSound: null,
    cleanSound: null,
    rand: function(min, max) {
      var ref;
      if (max == null) {
        ref = [min, 0], max = ref[0], min = ref[1];
      }
      return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    playCluckSound: function() {
      return this.cluckSounds[this.rand(0, 2)].play();
    },
    playFartSound: function() {
      return this.fartSound.play();
    },
    playCleanUpSound: function() {
      return this.cleanSound.play();
    },
    onUserFirebaseObjectLoaded: function() {
      return this.app.state = APP_STATE.ASK_NAME;
    },
    onAuthAnonymously: function(error, authData) {
      var userReference;
      if (error) {
        angular.extend(this.app, {
          state: APP_STATE.ERROR,
          error: "Unable to connect to firebase: " + error
        });
        return this.$rootScope.$apply();
      } else {
        userReference = this.db.child("chicken/" + authData.uid);
        this.app.userFirebaseObject = this.$firebaseObject(userReference);
        this.app.userFirebaseObject.$loaded(this.onUserFirebaseObjectLoaded);
        userReference.onDisconnect().remove();
        this.app.users = this.$firebaseArray(this.db.child('chicken').orderByChild('-score'));
        return this.app.poops = this.$firebaseArray(this.db.child('poops').limitToLast(100));
      }
    },
    init: function() {
      var i, j;
      for (i = j = 0; j <= 2; i = ++j) {
        this.cluckSounds.push(new Sound("cluck" + i));
      }
      this.fartSound = new Sound('fart');
      this.cleanSound = new Sound('clean');
      return this.db.authAnonymously(this.onAuthAnonymously);
    }
  });


  /*
      Application main controller
   */

  app.controller('MainController', {
    inject: [FACTORY],
    local: {
      scope: {
        APP_STATE: APP_STATE,
        app: FACTORY,
        rand: FACTORY,
        onEnterName: LOCAL_PROPERTY,
        addScore: LOCAL_METHOD
      },

      /*
          Add score to player
       */
      addScore: function(poop) {
        if (this.app.user == null) {
          return;
        }
        this.app.user.score++;
        return this.app.poops.$remove(poop);
      },

      /*
          Name form submit handler
       */
      onEnterName: function() {
        if (this.app.user.name.trim()) {
          return this.app.state = APP_STATE.READY;
        }
      },

      /*
          On name form submit success
       */
      onChangeAppState: function() {
        if (this.app.state !== APP_STATE.ASK_NAME) {
          return;
        }
        this.app.userFirebaseObject.$value = {
          name: 'Clucker #' + this.rand(1, 999),
          x: this.rand(50, 800),
          y: this.rand(200, 500),
          state: CHICKEN_STATE.IDLE,
          score: 0
        };
        this.app.userFirebaseObject.$save();
        return this.app.userFirebaseObject.$bindTo(this.$scope, 'user').then(this.onUserReady);
      },

      /*
          Fired on bind userFirebaseObject to @$scope.user
       */
      onUserReady: function() {
        return this.app.user = this.$scope.user;
      },
      watch: {
        'app.state': 'onChangeAppState'
      }
    }
  });


  /*
      Chicken directive
   */

  app.directive("chicken", {
    restrict: Triangle.DIRECTIVE_TYPE.ELEMENT,
    templateUrl: 'jsChicken',
    inject: [FACTORY],
    scope: {
      chicken: '=model'
    },
    local: {
      scope: {
        playCluckSound: FACTORY,
        playFartSound: FACTORY,
        playCleanUpSound: FACTORY,
        rand: FACTORY,
        app: FACTORY,
        chicken: LOCAL_SCOPE,
        state: LOCAL_PROPERTY,
        onChickenClick: LOCAL_METHOD
      },
      state: {
        reversed: 'normal',
        name: CHICKEN_STATE.IDLE,
        frame: 0
      },
      sprite: null,
      timeout: null,
      clearTimeout: function() {
        if (this.timeout == null) {
          return;
        }
        clearTimeout(this.timeout);
        return this.timeout = null;
      },
      setIdleState: function() {
        if (!this.app.user) {
          return;
        }
        this.app.user.state = CHICKEN_STATE.IDLE;
        this.clearTimeout();
        return this.$scope.$apply();
      },
      onChickenClick: function() {
        if (!this.app.user) {
          return;
        }
        if (this.app.user.$id === this.chicken.$id) {
          this.setState(CHICKEN_STATE.POOP, 700);
          return this.app.poops.$add({
            x: this.chicken.x + (this.state.reversed === 'normal' ? -70 : -40),
            y: this.chicken.y + 40
          });
        } else {
          return this.app.message = this.chicken.name + ", " + this.app.message;
        }
      },
      onChickenMessageChange: function(message) {
        if (!message) {
          return;
        }
        return this.setState(CHICKEN_STATE.CLUCK, 1000);
      },
      setState: function(stateName, time) {
        if (!(this.app.user && this.app.user.$id === this.chicken.$id)) {
          return;
        }
        this.app.user.state = stateName;
        this.clearTimeout();
        return this.timeout = setTimeout(this.setIdleState, time);
      },
      onChickenStateChange: function(state) {
        this.state.name = state || CHICKEN_STATE.IDLE;
        if (state == null) {
          return;
        }
        if (state === CHICKEN_STATE.CLUCK) {
          this.playCluckSound();
        }
        if (state === CHICKEN_STATE.POOP) {
          this.playFartSound();
        }
        return this.state.frame = 0;
      },
      onChickenXChange: function(newVal, oldVal) {
        this.setState(CHICKEN_STATE.MOVE, 1000);
        return this.state.reversed = newVal < oldVal ? 'reversed' : 'normal';
      },
      onChickenScore: function() {
        return this.playCleanUpSound();
      },
      nextFrame: function() {
        if (this.state.frame > SPRITE[this.state.name]) {
          this.state.frame = 0;
        }
        this.sprite.css({
          backgroundPosition: "-" + ((this.state.frame % SPRITE.line) * SPRITE.w + 60) + "px -" + ((Math.round(this.state.frame / SPRITE.line) - 1) * SPRITE.h) + "px"
        });
        this.state.frame++;
        return setTimeout(this.nextFrame, SPRITE.speed);
      },
      watch: {
        'chicken.message': 'onChickenMessageChange',
        'chicken.state': 'onChickenStateChange',
        'chicken.x': 'onChickenXChange',
        'chicken.score': 'onChickenScore'
      }
    },
    link: function() {
      this.sprite = this.$element.find('.sprite');
      this.state.frame = this.rand(0, 50);
      return this.nextFrame();
    }
  });


  /*
      Controls directive
   */

  app.directive("controls", {
    restrict: Triangle.DIRECTIVE_TYPE.ATTRIBUTE,
    inject: [FACTORY],
    local: {
      scope: {
        app: FACTORY,
        send: LOCAL_PROPERTY,
        sendMessage: LOCAL_METHOD
      },
      state: {
        reversed: 'normal',
        name: CHICKEN_STATE.IDLE,
        frame: 0
      },
      timeout: null,
      clearTimeout: function() {
        if (this.timeout == null) {
          return;
        }
        clearTimeout(this.timeout);
        return this.timeout = null;
      },
      clearMessage: function() {
        angular.extend(this.$scope.user, {
          time: 0
        });
        this.timeout = null;
        return this.$scope.$apply();
      },
      sendMessage: function() {
        var message;
        if ((this.app.user != null) && (message = this.app.message.trim())) {
          this.clearTimeout();
          angular.extend(this.app.user, {
            message: message,
            time: Date.now()
          });
          this.timeout = setTimeout(this.clearMessage, 5000);
        }
        return this.app.message = '';
      },
      onMovableClick: function(e) {
        console.log(e);
        if (this.app.user == null) {
          return;
        }
        angular.extend(this.app.user, {
          x: e.layerX + 40,
          y: e.clientY - 90
        });
        return this.$scope.$apply();
      }
    },
    events: {
      'click .movable': 'onMovableClick'
    }
  });

}).call(this);

//# sourceMappingURL=app.js.map
